%Scripts for Lab 9

%Problem 1: the my_trap function
%saved in the flash drive

%Problem 2
%First: the charge q as an integralof the current function 
%over time

%load measured i and t data vectors
load RLData.txt
%assign 2 vectors to the loaded data
Time = (RLData(:,1)');
Current = (RLData(:,2)');
%calculate the integral of the function with trapezoids/my_trap function
TrapIntegral = my_trap(Time,Current);
%display the result of the trapezoidal Riemann Sum
fprintf('Total charge estimated from measured data by trapezoidal rule is %.f Coulombs. \n',TrapIntegral)

%define a function handle RLModel that calculates current from i0 and tau
%generated in Lab 8, I0 = 2 and Tau = 40
RLModel = @(Time)2*exp(-Time/40);
%get lower bound of the integral from a user input
Lower_Bound = input('Please enter a minimum value for time in seconds: '); 
%%get upper bound of the integral from a user input
Upper_Bound = input('Please enter a maximum value for time in seconds: '); 
%calculate the integral of RLModel from a to b
AreaUnderCurve = integral(RLModel,Lower_Bound,Upper_Bound);
%print the value generated by the RLModel function
fprintf('Total charge estimated from model by integral function is %.6f Coulombs. \n',AreaUnderCurve)

%determine the value of the integral from zero to infinity
%first, get a model value for the exact value of q from the given constants
ModelQ = 2*40;
%determine an experimental value for q from the function handle and the
%integral
%integrate from zero to infinity
ExperimentalQ = integral(RLModel,0,Inf);
%display the result of the integral
fprintf('Total charge from exact integral is %.6f Coulombs. \n',ExperimentalQ)
%consider adding an if statement to this later
%in order to compare the 2 values

%Problem 3: VL = L*(diL/dt)

%load the measured value of data and time
load RLData.txt 
%prompt the user for a value of L(inductance)
Inductance = input('Please enter a value of L in henrys: ');
%assign 2 vectors to the loaded data
Time = (RLData(:,1)');
Current = (RLData(:,2)');
%assign a vector for average time using the midpoint rule
%we are plotting a derivative with respect to current over the 
%average time
Time_Avg = Time(2:end)-diff(Time)/2;
%calculate the derivative of the current using the diff function
%using the diff function, difference in current over difference in time
DerivMat= diff(Current)./ diff(Time);

%use the RLModel function handle to calculate the current from the time
CurrentMat = RLModel(Time);
%Calculate the derivative from the calculated current and the time matrix
DerivMat2 = diff(CurrentMat) ./ diff(Time);

%part c
%generate a function for the voltage based on the derivative of the 
%current equation
VoltageFunction = @(t)(-2/40)*exp(-t/40);
%input the measured time matrix to the function
SmoothVoltageMatrix = VoltageFunction(Time);

%plot the graph, all 3 at the same time
plot(Time,SmoothVoltageMatrix,'b',Time_Avg,DerivMat2,'g',Time_Avg,DerivMat,'r')
%do all the graph labeling
title('Derivative of Current With Respect to Time Over the Elapsed Time')
xlabel('Elapsed Time')
ylabel('Change in Current over change in time')
%add a legend to the graph, all 3 plots on the same graph
legend('Function Handle Model over Time','Derivative of RL Function Handle over average Time','Difference in Current over Average Time')